'use strict';

var vue = require('vue');
var web = require('@tolgee/web');

/* eslint-disable @typescript-eslint/no-var-requires */
const TolgeeProvider = vue.defineComponent({
    name: 'TolgeeProvider',
    props: {
        tolgee: { type: Object, required: false },
        fallback: {
            type: [Object, String],
        },
        ssr: {
            type: [Object, Boolean],
            required: false,
        },
    },
    setup(props) {
        const tolgeeContext = vue.inject('tolgeeContext');
        // for backward compatibility
        if (props.tolgee) {
            tolgeeContext.value.tolgee = props.tolgee;
        }
        const tolgee = vue.computed(() => tolgeeContext.value.tolgee);
        if (!tolgee.value) {
            throw new Error('Tolgee instance not provided');
        }
        if (tolgeeContext.value.isInitialRender && Boolean(props.ssr)) {
            const ssr = (typeof props.ssr === 'object' ? props.ssr : {});
            tolgee.value.setEmitterActive(false);
            tolgee.value.addStaticData(ssr.staticData);
            tolgee.value.changeLanguage(ssr.language);
            tolgee.value.setEmitterActive(true);
            if (!tolgee.value.isLoaded()) {
                // warning user, that static data provided are not sufficient
                // for proper SSR render
                const missingRecords = tolgee.value
                    .getRequiredDescriptors(ssr.language)
                    .map(({ namespace, language }) => namespace ? `${namespace}:${language}` : language)
                    .filter((key) => { var _a; return !((_a = ssr.staticData) === null || _a === void 0 ? void 0 : _a[key]); });
                // eslint-disable-next-line no-console
                console.warn(`Tolgee: Missing records in "staticData" for proper SSR functionality: ${missingRecords.map((key) => `"${key}"`).join(', ')}`);
            }
        }
        vue.onMounted(() => {
            tolgeeContext.value.isInitialRender = false;
        });
        const isLoading = vue.ref(!tolgee.value.isLoaded());
        vue.onBeforeMount(() => {
            tolgee.value.run().finally(() => {
                isLoading.value = false;
            });
        });
        vue.onUnmounted(() => {
            tolgee.value.stop();
        });
        return { isLoading };
    },
    render() {
        var _a, _b, _c, _d;
        return !this.isLoading
            ? (_b = (_a = this.$slots).default) === null || _b === void 0 ? void 0 : _b.call(_a)
            : ((_d = (_c = this.$slots).fallback) === null || _d === void 0 ? void 0 : _d.call(_c)) || this.fallback || null;
    },
});

const useTranslateInternal = (ns) => {
    const namespaces = web.getFallback(ns);
    const tolgeeContext = vue.inject('tolgeeContext');
    const tolgee = vue.computed(() => tolgeeContext.value.tolgee);
    if (!tolgee.value) {
        throw new Error('Tolgee instance not provided');
    }
    const t = vue.ref(createTFunction());
    const subscription = tolgee.value.on('update', () => {
        t.value = createTFunction();
        isLoading.value = !tolgee.value.isLoaded(namespaces);
    });
    tolgee.value.addActiveNs(namespaces);
    vue.onUnmounted(() => {
        subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();
        tolgee.value.removeActiveNs(namespaces);
    });
    const isLoading = vue.ref(!tolgee.value.isLoaded(namespaces));
    function createTFunction() {
        return (props) => {
            var _a;
            const fallbackNs = (_a = props.ns) !== null && _a !== void 0 ? _a : namespaces === null || namespaces === void 0 ? void 0 : namespaces[0];
            return tolgee.value.t(Object.assign(Object.assign({}, props), { ns: fallbackNs }));
        };
    }
    return { t, isLoading };
};

const T = vue.defineComponent({
    name: 'T',
    props: {
        keyName: { type: String, required: true },
        params: Object,
        defaultValue: String,
        noWrap: {
            type: Boolean,
            default: false,
        },
        ns: { type: String },
        language: { type: String },
    },
    setup() {
        const { t } = useTranslateInternal();
        return { t };
    },
    render() {
        const slotsParams = {};
        Object.keys(this.$slots).forEach((key) => {
            slotsParams[key] = this.$slots[key]();
        });
        const assignedParams = Object.assign({}, this.$props.params, slotsParams);
        const params = {
            key: this.$props.keyName,
            params: assignedParams,
            defaultValue: this.$props.defaultValue,
            noWrap: this.$props.noWrap,
            ns: this.$props.ns,
            language: this.$props.language,
        };
        const content = this.t(params);
        return content;
    },
});

const useTolgee = (events) => {
    const instance = vue.getCurrentInstance();
    const tolgeeContext = vue.inject('tolgeeContext');
    const tolgee = vue.computed(() => tolgeeContext.value.tolgee);
    const listeners = events === null || events === void 0 ? void 0 : events.map((e) => {
        return tolgee.value.on(e, () => {
            tolgeeContext.value.tolgee = Object.freeze(Object.assign({}, tolgee.value));
            instance.proxy.$forceUpdate();
        });
    });
    vue.onUnmounted(() => {
        listeners === null || listeners === void 0 ? void 0 : listeners.forEach((listener) => listener.unsubscribe());
    });
    return tolgee;
};

const useTranslate = (namespaces) => {
    const { t: tInternal, isLoading } = useTranslateInternal(namespaces);
    const t = vue.computed(() => (...params) => {
        // @ts-ignore
        const props = web.getTranslateProps(...params);
        return tInternal.value(props);
    });
    return { t, isLoading };
};

const GlobalContextPlugin = () => (tolgee) => {
    return tolgee;
};

const VueTolgee = {
    install(app, options) {
        const tolgee = options === null || options === void 0 ? void 0 : options.tolgee;
        if (!tolgee) {
            throw new Error('Tolgee instance not passed in options');
        }
        const isSsrEnabled = Boolean(options === null || options === void 0 ? void 0 : options.enableSSR);
        const reactiveContext = vue.ref({
            tolgee: tolgee,
            isInitialRender: isSsrEnabled,
        });
        app.provide('tolgeeContext', reactiveContext);
        if (isSsrEnabled) {
            const getOriginalTolgeeInstance = () => (Object.assign(Object.assign({}, reactiveContext.value.tolgee), { t: ((...args) => {
                    const props = web.getTranslateProps(...args);
                    return tolgee.t(Object.assign({}, props));
                }) }));
            const getTolgeeInstanceWithDeactivatedWrapper = () => (Object.assign(Object.assign({}, reactiveContext.value.tolgee), { t: ((...args) => {
                    const props = web.getTranslateProps(...args);
                    return tolgee.t(Object.assign(Object.assign({}, props), { noWrap: true }));
                }) }));
            reactiveContext.value.tolgee = getTolgeeInstanceWithDeactivatedWrapper();
            vue.watch(() => reactiveContext.value.isInitialRender, (isInitialRender) => {
                if (!isInitialRender) {
                    reactiveContext.value.tolgee = getOriginalTolgeeInstance();
                }
            });
        }
        reactiveContext.value.tolgee.on('cache', () => {
            reactiveContext.value.tolgee = Object.freeze(Object.assign({}, reactiveContext.value.tolgee));
        });
        app.config.globalProperties.$t = ((...args) => reactiveContext.value.tolgee.t(...args));
        // keep it for backward compatibility
        // but it is not reactive
        // not recommended to use it
        app.config.globalProperties.$tolgee = reactiveContext.value.tolgee;
    },
};

exports.GlobalContextPlugin = GlobalContextPlugin;
exports.T = T;
exports.TolgeeProvider = TolgeeProvider;
exports.VueTolgee = VueTolgee;
exports.useTolgee = useTolgee;
exports.useTranslate = useTranslate;
Object.keys(web).forEach(function (k) {
    if (k !== 'default' && !exports.hasOwnProperty(k)) Object.defineProperty(exports, k, {
        enumerable: true,
        get: function () { return web[k]; }
    });
});
//# sourceMappingURL=tolgee-vue.cjs.js.map
