import{defineComponent as e,inject as t,computed as a,onMounted as o,ref as l,onBeforeMount as n,onUnmounted as s,getCurrentInstance as r,watch as i}from"vue";import{getFallback as u,getTranslateProps as g}from"@tolgee/web";export*from"@tolgee/web";const c=e({name:"TolgeeProvider",props:{tolgee:{type:Object,required:!1},fallback:{type:[Object,String]},ssr:{type:[Object,Boolean],required:!1}},setup(e){const r=t("tolgeeContext");e.tolgee&&(r.value.tolgee=e.tolgee);const i=a((()=>r.value.tolgee));if(!i.value)throw new Error("Tolgee instance not provided");if(r.value.isInitialRender&&Boolean(e.ssr)){const t="object"==typeof e.ssr?e.ssr:{};if(i.value.setEmitterActive(!1),i.value.addStaticData(t.staticData),i.value.changeLanguage(t.language),i.value.setEmitterActive(!0),!i.value.isLoaded()){const e=i.value.getRequiredDescriptors(t.language).map((({namespace:e,language:t})=>e?`${e}:${t}`:t)).filter((e=>{var a;return!(null===(a=t.staticData)||void 0===a?void 0:a[e])}));console.warn(`Tolgee: Missing records in "staticData" for proper SSR functionality: ${e.map((e=>`"${e}"`)).join(", ")}`)}}o((()=>{r.value.isInitialRender=!1}));const u=l(!i.value.isLoaded());return n((()=>{i.value.run().finally((()=>{u.value=!1}))})),s((()=>{i.value.stop()})),{isLoading:u}},render(){var e,t,a,o;return this.isLoading?(null===(o=(a=this.$slots).fallback)||void 0===o?void 0:o.call(a))||this.fallback||null:null===(t=(e=this.$slots).default)||void 0===t?void 0:t.call(e)}}),v=e=>{const o=u(e),n=t("tolgeeContext"),r=a((()=>n.value.tolgee));if(!r.value)throw new Error("Tolgee instance not provided");const i=l(v()),g=r.value.on("update",(()=>{i.value=v(),c.value=!r.value.isLoaded(o)}));r.value.addActiveNs(o),s((()=>{null==g||g.unsubscribe(),r.value.removeActiveNs(o)}));const c=l(!r.value.isLoaded(o));function v(){return e=>{var t;const a=null!==(t=e.ns)&&void 0!==t?t:null==o?void 0:o[0];return r.value.t(Object.assign(Object.assign({},e),{ns:a}))}}return{t:i,isLoading:c}},p=e({name:"T",props:{keyName:{type:String,required:!0},params:Object,defaultValue:String,noWrap:{type:Boolean,default:!1},ns:{type:String},language:{type:String}},setup(){const{t:e}=v();return{t:e}},render(){const e={};Object.keys(this.$slots).forEach((t=>{e[t]=this.$slots[t]()}));const t=Object.assign({},this.$props.params,e),a={key:this.$props.keyName,params:t,defaultValue:this.$props.defaultValue,noWrap:this.$props.noWrap,ns:this.$props.ns,language:this.$props.language};return this.t(a)}}),d=e=>{const o=r(),l=t("tolgeeContext"),n=a((()=>l.value.tolgee)),i=null==e?void 0:e.map((e=>n.value.on(e,(()=>{l.value.tolgee=Object.freeze(Object.assign({},n.value)),o.proxy.$forceUpdate()}))));return s((()=>{null==i||i.forEach((e=>e.unsubscribe()))})),n},b=e=>{const{t:t,isLoading:o}=v(e);return{t:a((()=>(...e)=>{const a=g(...e);return t.value(a)})),isLoading:o}},f=()=>e=>e,j={install(e,t){const a=null==t?void 0:t.tolgee;if(!a)throw new Error("Tolgee instance not passed in options");const o=Boolean(null==t?void 0:t.enableSSR),n=l({tolgee:a,isInitialRender:o});if(e.provide("tolgeeContext",n),o){const e=()=>Object.assign(Object.assign({},n.value.tolgee),{t:(...e)=>{const t=g(...e);return a.t(Object.assign({},t))}}),t=()=>Object.assign(Object.assign({},n.value.tolgee),{t:(...e)=>{const t=g(...e);return a.t(Object.assign(Object.assign({},t),{noWrap:!0}))}});n.value.tolgee=t(),i((()=>n.value.isInitialRender),(t=>{t||(n.value.tolgee=e())}))}n.value.tolgee.on("cache",(()=>{n.value.tolgee=Object.freeze(Object.assign({},n.value.tolgee))})),e.config.globalProperties.$t=(...e)=>n.value.tolgee.t(...e),e.config.globalProperties.$tolgee=n.value.tolgee}};export{f as GlobalContextPlugin,p as T,c as TolgeeProvider,j as VueTolgee,d as useTolgee,b as useTranslate};
//# sourceMappingURL=tolgee-vue.esm.min.js.map
