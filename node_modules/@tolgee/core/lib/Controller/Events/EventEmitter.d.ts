import { Subscription, Handler, ListenerEvent } from '../../types';
export declare const EventEmitter: <Event_1 extends ListenerEvent<string, any>>(type: Event_1["type"], isActive: () => boolean) => EventEmitterInstance<Event_1>;
export type EventEmitterInstance<Event> = Event extends ListenerEvent<infer E, infer T> ? {
    readonly listen: (handler: Handler<ListenerEvent<E, T>>) => Subscription;
    readonly emit: (data: T) => void;
} : never;
